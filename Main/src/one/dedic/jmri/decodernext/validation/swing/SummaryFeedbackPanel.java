/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package one.dedic.jmri.decodernext.validation.swing;

import com.jgoodies.validation.ValidationResult;
import com.jgoodies.validation.ValidationResultModel;
import com.jgoodies.validation.util.DefaultValidationResultModel;
import com.jgoodies.validation.view.ValidationResultViewFactory;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.util.Collection;
import java.util.Collections;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import one.dedic.jmri.decodernext.validation.ValidationFeedback;

/**
 *
 * @author sdedic
 */
public class SummaryFeedbackPanel extends javax.swing.JPanel implements ValidationFeedback {
    private JScrollPane validationList;
    private ValidationResultModel summaryModel = new DefaultValidationResultModel();
    
    /**
     * Creates new form SummaryFeedbackPanel
     */
    public SummaryFeedbackPanel() {
        initComponents();
        setVisible(false);
    }
    
    private JScrollPane createReportList() {
        validationList = (JScrollPane)ValidationResultViewFactory.createReportList(
                summaryModel, getBackground());
        validationList.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        return validationList;
    }
    
    private JLabel createSingleText() {
        return ValidationResultViewFactory.createReportIconAndTextLabel(summaryModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        singlePanel = new javax.swing.JPanel();
        jLabel2 = createSingleText();
        multiplePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = createReportList();

        setLayout(new java.awt.CardLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(SummaryFeedbackPanel.class, "SummaryFeedbackPanel.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout singlePanelLayout = new javax.swing.GroupLayout(singlePanel);
        singlePanel.setLayout(singlePanelLayout);
        singlePanelLayout.setHorizontalGroup(
            singlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        singlePanelLayout.setVerticalGroup(
            singlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(singlePanelLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(0, 34, Short.MAX_VALUE))
        );

        add(singlePanel, "single");

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(SummaryFeedbackPanel.class, "SummaryFeedbackPanel.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout multiplePanelLayout = new javax.swing.GroupLayout(multiplePanel);
        multiplePanel.setLayout(multiplePanelLayout);
        multiplePanelLayout.setHorizontalGroup(
            multiplePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(multiplePanelLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 225, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        multiplePanelLayout.setVerticalGroup(
            multiplePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(multiplePanelLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        add(multiplePanel, "multiple");
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel multiplePanel;
    private javax.swing.JPanel singlePanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public Collection<Object> getKeys() {
        return Collections.EMPTY_SET;
    }

    @Override
    public Dimension getPreferredSize() {
        return super.getPreferredSize(); 
    }

    @Override
    public void indicateResult(ValidationResult result) {
        if (result.isEmpty()) {
            setVisible(false);
            return;
        }
        summaryModel.setResult(result);
        boolean single = result.getMessages().size() == 1;
        ((CardLayout)getLayout()).show(this, single ? "single" : "multiple");
        setVisible(true);
    }

    @Override
    public boolean reportMessages(ValidationResult result) {
        indicateResult(result);
        return true;
    }

    @Override
    public Action transferControl(Object key) {
        return null;
    }
}
