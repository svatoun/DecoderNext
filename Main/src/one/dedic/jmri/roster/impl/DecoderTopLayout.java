/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package one.dedic.jmri.roster.impl;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.io.IOException;
import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import jmri.jmrit.roster.RosterEntry;
import one.dedic.jmri.decodernext.ui.ComposedPane;
import one.dedic.jmri.decodernext.ui.Section;
import one.dedic.jmri.decodernext.ui.ValidatingUI;
import one.dedic.jmri.decodernext.validation.FeedbackController;
import one.dedic.jmri.decodernext.validation.ValidatorService;
import one.dedic.jmri.decodernext.validation.swing.SummaryFeedbackPanel;
import one.dedic.jmri.roster.detail.EntryModel;
import one.dedic.jmri.roster.detail.RosterDetail;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;

/**
 *
 * @author sdedic
 */
public class DecoderTopLayout extends javax.swing.JPanel {
    private final RosterEntry entry;
    private final EntryModel  entryModel;
    
    private FeedbackController feedbackController;
    private Lookup detailContext;
    private InstanceContent contextStorage = new InstanceContent();
    
    private SummaryFeedbackPanel summaryPanel = new SummaryFeedbackPanel();
    
    /**
     * Creates new form DecoderTopLayout
     */
    public DecoderTopLayout(EntryModel model) {
        this.entryModel = model;
        this.entry = model.getEntry();
        
        contextStorage.add(model);
        contextStorage.add(entry);
        contextStorage.add(model.getRoster());
        
        detailContext = new AbstractLookup(contextStorage);
        
        initComponents();
        
        feedbackArea.add(summaryPanel, BorderLayout.CENTER);

        ComposedPane cp = new ComposedPane();
        sectionGroups.addTab("General", ImageUtilities.loadImageIcon("one/dedic/jmri/decodernext/resources/general32.png", false), 
                cp);
        
        AbstractNode n = new AbstractNode(Children.LEAF);
        n.setName("Model Information");
        
        cp.addSection(new Section() {
            RosterDetail detail;
            
            @Override
            public Object getKey() {
                return "Model Information";
            }

            @Override
            public Node getNode() {
                return n;
            }

            @Override
            public Dimension getSize() {
                return new Dimension(2, 1);
            }

            @Override
            public RosterDetail createComponent() {
                if (detail != null) {
                    return detail;
                }
                RosterDetail d = new RosterDetail(entryModel);
                d.setRoster(model.getRoster());
                try {
                    d.load();
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
                detail = d;
                return d;
            }

            @Override
            public ValidatorService getValidation() {
                return createComponent().getValidatorService();
            }

            @Override
            public void addChangeListener(ChangeListener l) {
            }

            @Override
            public void removeChangeListener(ChangeListener l) {
            }
        });
        
        feedbackController = new FeedbackController();
        feedbackController.setContext(detailContext);
        feedbackController.setSummaryFeedback(summaryPanel);
    }

    @Override
    public void removeNotify() {
        super.removeNotify();
    }

    @Override
    public void addNotify() {
        super.addNotify();
        feedbackController.connectFrom(this);
        feedbackController.performValidation();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        actionToolbar = new javax.swing.JToolBar();
        sectionGroups = new javax.swing.JTabbedPane();
        feedbackArea = new javax.swing.JPanel();

        actionToolbar.setRollover(true);

        sectionGroups.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        sectionGroups.setInheritsPopupMenu(true);

        feedbackArea.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(actionToolbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(sectionGroups, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(feedbackArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(actionToolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sectionGroups, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(feedbackArea, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar actionToolbar;
    private javax.swing.JPanel feedbackArea;
    private javax.swing.JTabbedPane sectionGroups;
    // End of variables declaration//GEN-END:variables
}
