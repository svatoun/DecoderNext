/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package one.dedic.jmri.roster.impl;

import java.awt.CardLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.swing.ListSelectionModel;
import jmri.jmrit.roster.Roster;
import jmri.jmrit.roster.RosterEntry;
import jmri.jmrit.roster.swing.RosterTable;
import org.netbeans.api.actions.Openable;
import org.openide.awt.MouseUtils;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.Lookup;

/**
 *
 * @author sdedic
 */
public class RosterContentPane extends javax.swing.JPanel {
    private RosterTable   jmriRosterTable;
    private Roster        theRoster;
    private RosterUIActions tableUiActions;
    
    /**
     * Creates new form RosterContentPane
     */
    public RosterContentPane() {
        initComponents();
    }

    
    private RosterTable createRosterTable() {
        return jmriRosterTable = new RosterTable(true, ListSelectionModel.SINGLE_INTERVAL_SELECTION);
    }
    
    void loadJMRI() {
        jmriRosterTable = createRosterTable();
        theRoster = Lookup.getDefault().lookup(Roster.class);
        add(jmriRosterTable, "roster"); // NOI18N
        ((CardLayout)getLayout()).show(this, "roster");
    
        tableUiActions = new RosterUIActions();
        jmriRosterTable.getTable().addMouseListener(tableUiActions);
    }
    
    class RosterUIActions extends MouseAdapter {

        @Override
        public void mouseClicked(MouseEvent e) {
            if (MouseUtils.isDoubleClick(e)) {
                int rowIndex = jmriRosterTable.getTable().rowAtPoint(e.getPoint());
                int rosterIndex = jmriRosterTable.getTable().getRowSorter().convertRowIndexToModel(rowIndex);
                
                openEntry(theRoster.getEntry(rosterIndex));
            }
        }
    }
    
    private void openEntry(RosterEntry e) {
        if (e == null) {
            return;
        }
        String fileName = e.getFileName();
        String location = theRoster.getRosterFilesLocation();
        
        Path p = Paths.get(location).resolve(fileName);
        if (!Files.exists(p)) {
            // PENDING: perhaps report to the user ?
            return;
        }
        FileObject fo = FileUtil.toFileObject(p.toFile());
        
        Openable oo = fo.getLookup().lookup(Openable.class);
        if (oo == null) {
            // FIXME: report that the roster entry cannot be opened
            return;
        }
        oo.open();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        blankPane = new javax.swing.JPanel();
        loadingMsg = new javax.swing.JLabel();

        setLayout(new java.awt.CardLayout());

        org.openide.awt.Mnemonics.setLocalizedText(loadingMsg, org.openide.util.NbBundle.getMessage(RosterContentPane.class, "RosterContentPane.loadingMsg.text")); // NOI18N

        javax.swing.GroupLayout blankPaneLayout = new javax.swing.GroupLayout(blankPane);
        blankPane.setLayout(blankPaneLayout);
        blankPaneLayout.setHorizontalGroup(
            blankPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blankPaneLayout.createSequentialGroup()
                .addContainerGap(84, Short.MAX_VALUE)
                .addComponent(loadingMsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(84, Short.MAX_VALUE))
        );
        blankPaneLayout.setVerticalGroup(
            blankPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, blankPaneLayout.createSequentialGroup()
                .addContainerGap(141, Short.MAX_VALUE)
                .addComponent(loadingMsg, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                .addContainerGap(139, Short.MAX_VALUE))
        );

        add(blankPane, "loading");
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel blankPane;
    private javax.swing.JLabel loadingMsg;
    // End of variables declaration//GEN-END:variables
}
